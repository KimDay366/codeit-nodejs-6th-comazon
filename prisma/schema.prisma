// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  firstName      String
  lastName       String
  address        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userPreference UserPreference?
  orders         Order[]
}

// UserPreference? - 단일값, 1 : 1 로 매칭 될 떄 
// Order[] - 배열, User 입장에서 보면 1:N 매칭이 되므로, order가 여러개 생겨서 배열로 값을 선언함

// UserPreference => userPreference
// 마이크레이션을 진행하면 현재 파일을 기준으로 클라이언트가 사용할 DB를 다시 만들어 주는데 
// userPreference 는 DB테이블에서 사용되는 값이 아니라 
// prisma UI에서만 사용되는 값이기 때문에 prisma에서만 업데이트 하면 되는 값이었던것!

model UserPreference {
  id           String   @id @default(uuid())
  receiveEmail Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
}

// @relation 하기 
//user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
//사용 할 값 이름  |  참조 할 model이름  |  @relation(fields: [ 정의하고 있는 모델 = 현재 모델, UserPreference ] 안에서 사용할 필드 이름, references: 참조 할  필드 이름, onDelete: 참조 데이터가 삭제될 떄 설정)
// userId  String  @unique
// 참조하여 가지고 온 데이터의 경우 1 : 1 관계로 참조 할 경우, @unique를 써야 함
// 만약에 다른 경우로 쓴다면 @unique를 쓰면 안됨!

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  category    Category
  price       Float
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

// enum : 쇼핑몰처럼 제품 분류시 사용하는 카테고리 등록할 떄 쓰는 명령어
enum Category {
  FASHION
  BEAUTY
  SPORTS
  ELECTRONICS
  HOME_INTERIOR
  HOUSEHOLD_SUPPLIES
  KITCHENWARE
}

model Order {
  id         String      @id @default(uuid())
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  orderItems OrderItem[]
}

// user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
// userId     String?
// @relation 에서 onDelete : SetNull -> 유저가 삭제되면 Null 넣는것이므로 
// null = 빈값 = userID가 String 규칙이 안맞기 때문에 둘 다 속성에 ?를 넣어서 옵셔널 하게 바꿔줌

enum OrderStatus {
  PENDING
  COMPLETE
}

model OrderItem {
  id        String   @id @default(uuid())
  unitPrice Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
}
